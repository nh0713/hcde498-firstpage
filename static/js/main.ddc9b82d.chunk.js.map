{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","react_default","a","createElement","className","App_SearchPage","Component","SearchPage","App_Banner","Container","fluid","App_SearchBar","App_RowHomeScreenButtons","Banner","SearchBar","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchClicked","event","console","log","searchText","searchInput","target","value","type","placeholder","aria-label","onChange","href","onClick","HomeScreenButton","role","RowHomeScreenButtons","Row","Col","App_HomeScreenButton","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oPAOMA,sMAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACE,EAAD,cALUC,cAkFZC,GAvEkBD,YA6DEA,6LAYtB,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAWC,OAAK,EAACN,UAAU,oBACzBH,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACS,EAAD,eAPeN,cAcnBO,mLAEF,OACEZ,EAAAC,EAAAC,cAAA,UAAQO,OAAK,EAACN,UAAU,UACtBH,EAAAC,EAAAC,cAAA,oDAJaG,aAefQ,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,cAAgB,SAACC,GACfC,QAAQC,IAAIV,EAAKW,aANAX,EASnBY,YAAc,SAACJ,GACbR,EAAKW,WAAaH,EAAMK,OAAOC,OAR/Bd,EAAKW,WAAa,GAFDX,wEAcjB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAa2B,KAAK,OAAOC,YAAY,iBAAiBC,aAAW,SAASC,SAAUf,KAAKS,eAE5G3B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAa+B,KAAK,IAAIC,QAASjB,KAAKI,eAC/CtB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCArBCE,aA6BlB+B,mLAEF,IAAIN,EAAOZ,KAAKJ,MAAMgB,KAEtB,OAAO9B,EAAAC,EAAAC,cAAA,KAAGgC,KAAK,IAAI/B,UAAU,qBAAqBkC,KAAK,UAAUP,UAJtCzB,aAQzBiC,mLAEA,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAKpC,UAAU,yCACfH,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAD,CAAkBX,KAAK,cAEzB9B,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAD,CAAkBX,KAAK,UAEzB9B,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAD,CAAkBX,KAAK,wBAZAzB,aAqBpBN,ICpKK2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8FCANC,IAASC,cARI,CACbC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,gBAInBC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD6G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ddc9b82d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, FormControl, FormLabel, Container, Row, Col } from \"react-bootstrap\";\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BADNAME } from 'dns';\r\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <LoginPage /> */}\r\n        <SearchPage />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass LoginPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.email = \"\";\r\n    this.password = \"\";\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    console.log(this.email);\r\n    console.log(this.password)\r\n  }\r\n\r\n  emailChange = (event) => {\r\n    // console.log(event.target.value);\r\n    this.email = event.target.value;\r\n  }\r\n\r\n  passwordChange = (event) => {\r\n    // console.log(event.target.value);\r\n    this.password =event.target.value;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Banner />\r\n        <div className=\"login\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <FormGroup controlId=\"email\" size=\"large\">\r\n              <FormLabel>Email</FormLabel>\r\n              <FormControl\r\n                autoFocus\r\n                type=\"email\"\r\n                onChange={this.emailChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup controlId=\"password\" size=\"large\">\r\n              <FormLabel>Password</FormLabel>\r\n              <FormControl\r\n                type=\"password\"\r\n                onChange={this.passwordChange}\r\n              />\r\n            </FormGroup>\r\n            <Button\r\n              block\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              // onClick={this.handleSubmit}\r\n            >\r\n              Login\r\n            </Button>\r\n          </form>\r\n          <div className=\"mt-4\">\r\n            <a href=\"#\" >Create Account</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass ResultsPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        Test div\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass SearchPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Banner />\r\n        <Container fluid className=\"searchAndButtons\">\r\n          <SearchBar />\r\n          <RowHomeScreenButtons />\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Banner extends Component {\r\n  render() {\r\n    return (\r\n      <header fluid className=\"banner\">\r\n        <h1>Buy and Sell Textbooks Locally</h1>\r\n        {/* <div class=\"search-box\">\r\n          <form>\r\n            <input class=\"search-txt\" type=\"text\" placeholder=\"Type to search\" aria-label=\"Search\" onChange={this.seachInput}></input>  \r\n          </form>\r\n        </div>  */}\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nclass SearchBar extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.searchText = \"\";\r\n  }\r\n\r\n  searchClicked = (event) => {\r\n    console.log(this.searchText);\r\n  }\r\n\r\n  searchInput = (event) => {\r\n    this.searchText = event.target.value;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-box\">\r\n        <form>\r\n          <input className=\"search-txt\" type=\"text\" placeholder=\"Type to search\" aria-label=\"Search\" onChange={this.searchInput}></input>  \r\n        </form>        \r\n        <a className=\"search-btn\" href='#' onClick={this.searchClicked}>\r\n          <i className=\"fas fa-search fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n    );\r\n    \r\n  }\r\n}\r\n\r\nclass HomeScreenButton extends Component {\r\n  render() {\r\n    let type = this.props.type;\r\n\r\n    return <a href=\"#\" className=\"homeBtn m-5 btn-lg\" role=\"button\">{type}</a>;\r\n  }\r\n}\r\n\r\nclass RowHomeScreenButtons extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"mt-5\">\r\n          <Row className=\"homePageBtnRow justify-content-center\">\r\n          <Col>\r\n            <HomeScreenButton type=\"My Posts\" />\r\n          </Col>\r\n          <Col>\r\n            <HomeScreenButton type=\"Sell\" />\r\n          </Col>\r\n          <Col>\r\n            <HomeScreenButton type=\"Bookmarks\" />\r\n          </Col>\r\n          </Row>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\n\r\nvar config = {\r\napiKey: \"AIzaSyA_jKe7ug9rZwmgEY64XC6hkm8rB4ckWww\",\r\nauthDomain: \"hcde-498-final-project.firebaseapp.com\",\r\ndatabaseURL: \"https://hcde-498-final-project.firebaseio.com\",\r\nprojectId: \"hcde-498-final-project\",\r\nstorageBucket: \"hcde-498-final-project.appspot.com\",\r\nmessagingSenderId: \"45130628859\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}